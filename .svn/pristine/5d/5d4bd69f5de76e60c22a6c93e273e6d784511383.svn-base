<form  #systemForm="ngForm" class="form-container">

   
  
    <div class="border_btm mb-3 col-12 mt-3">
      <h5>Network/Server Room Details</h5>
    </div>
    <div class="col-sm-4">
      <div class=" form-group mb-3">
        <label for="exampleFormControlInput1" class="form-label">No of Network/Server Rooms:</label>
        <input  placement="bottom" [ngbTooltip]="NooFroomTT" [(ngModel)]="networkRackData.noOfNetworkRooms" [ngModelOptions]="{standalone: true}" type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" >
      </div>
    </div>
    <div *ngIf="toHideAfterUpdate==false">
    <div *ngIf="!editOpen?networkRackData.noOfNetworkRooms>0 && networkRackTableData.networkRooms.length<networkRackData.noOfNetworkRooms:true">
      <div class="border_btm mb-3 col-12 mt-3">
        <h5>Fire Signal Notification Devices/ Alarm Kit Requiremnt</h5>
      </div>
      <div class="row">
        <div class="col-sm-4">
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">Alarm Required</label>
            <select [(ngModel)]="networkRackData.alarmRequired" [ngModelOptions]="{standalone: true}" class="form-control form-select" id="exampleFormControlSelect1" >
              <option selected="selected" value="">-Select-</option>
              <option value="Yes">Yes</option>
              <option value="No">No</option>
              <option value="idk">I don't know</option>
            </select>
          </div>
        </div>
        <div class="col-sm-4" *ngIf="(networkRackData.alarmRequired=='Yes' && isCS)">
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">Alarm Option</label>
            <select placement="bottom" [ngbTooltip]="panel" [(ngModel)]="networkRackData.alarmOption" [ngModelOptions]="{standalone: true}" class="form-control form-select" id="exampleFormControlSelect1" >
              <option selected="selected" value="">-Select-</option>
              <option value="Hooter">Hooter</option>
              <option value="Panel">Panel</option>
            </select>
          </div>
        </div>
      </div>
      
      
      <div class="border_btm mb-3 col-12 mt-3">
        <h5>Enter Equipment Details for Battery Room</h5>
      </div>
      <div class="row">
        <div class="col-sm-4">
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">Name of Room/Floor {{networkRackTableData.networkRooms.length+1}}:</label>
            <input placement="bottom" [ngbTooltip]="NameOfroomTT" [(ngModel)]="objRoom.roomName" [ngModelOptions]="{standalone: true}" type="text" class="form-control" id="exampleFormControlInput1" placeholder="" >
          </div>
        </div>
        <div class="col-sm-4">
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">Name of Rack {{objRoom.rack.length+1}}:</label>
            <input placement="bottom" [ngbTooltip]="NameOfrackTT" [(ngModel)]="objRack.rackName" [ngModelOptions]="{standalone: true}" type="text" class="form-control" id="exampleFormControlInput1" placeholder="" >
          </div>
        </div>
        <div *ngIf="isCS" class="col-sm-4">
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">CQRS Type:</label>
            <select placement="bottom" [ngbTooltip]="diContent"  [(ngModel)]="objRack.cqrsType" [ngModelOptions]="{standalone: true}" class="form-control form-select" id="exampleFormControlSelect1" >
              <option selected="selected" value="">-Select-</option>
              <option value="Direct">Direct</option>
              <option value="Indirect">Indirect</option>
            </select>
          </div>
        </div>
      </div>
    
      <div class="border_btm mb-3 col-12 mt-3">
        <h5>Dimensions of Network/Server Rack</h5>
      </div>
      <div class="row">
        <div class="col-sm-4">
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">Length (mm):</label>
            <input placement="bottom" [ngbTooltip]="lengthContent" [(ngModel)]="objRack.length" [ngModelOptions]="{standalone: true}" type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" >
          </div>
        </div>
        <div class="col-sm-4">
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">Depth (mm):</label>
            <input placement="bottom" [ngbTooltip]="widthContent" [(ngModel)]="objRack.width" [ngModelOptions]="{standalone: true}" type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" >
          </div>
        </div>
        <div class="col-sm-4">
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">Height (mm):</label>
            <input placement="bottom" [ngbTooltip]="heightContent" [(ngModel)]="objRack.height" [ngModelOptions]="{standalone: true}" type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" >
          </div>
        </div>
      </div>
    
    
      <div *ngIf="isCS" class="border_btm mb-3 col-12 mt-3">
        <h5>Position of Cylinder</h5>
      </div>
      <div *ngIf="isCS" class="col-sm-4">
        <div class=" form-group mb-3">
          <label for="exampleFormControlInput1" class="form-label">Choose Position:</label>
          <select placement="bottom" [ngbTooltip]="positionTT" [(ngModel)]="objRack.cylinderPosition" [ngModelOptions]="{standalone: true}" class="form-control" id="exampleFormControlSelect1" >
            <option selected="selected" value="">-Select-</option>
            <option value="Left hand">Left hand</option>
            <option value="Right hand">Right hand</option>
            <option value="Back side">Back side</option>
          </select>
        </div>
      </div>
      <div *ngIf="isCS" class="border_btm mb-3 col-12 mt-3">
        <h5>Distance Between wall to Network/Server Rack</h5>
      </div>
      <div *ngIf="isCS" class="row">
        <div class="col-sm-4" >
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">L.H.S (mm):</label>
            <input placement="bottom" [ngbTooltip]="lhs" [disabled]="objRack.cylinderPosition !== 'Left hand'" [(ngModel)]="objRack.lhs" [ngModelOptions]="{standalone: true}" type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" >
          </div>
        </div>
        <div class="col-sm-4" >
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">R.H.S (mm):</label>
            <input placement="bottom" [ngbTooltip]="rhs" [disabled]="objRack.cylinderPosition !== 'Right hand'" [(ngModel)]="objRack.rhs" [ngModelOptions]="{standalone: true}" type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" >
          </div>
        </div>
        <div class="col-sm-4">
          <div class=" form-group mb-3">
            <label for="exampleFormControlInput1" class="form-label">Back (mm):</label>
            <input placement="bottom" [ngbTooltip]="back" [disabled]="objRack.cylinderPosition !== 'Back side'" 
            [(ngModel)]="objRack.back" [ngModelOptions]="{standalone: true}" type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" >
          </div>
        </div>
      </div>
      <div *ngIf="isCS" class="border_btm mb-3 col-12 mt-3">
        <h5>Distance Between Two Network/Server Racks</h5>
      </div>
      <div *ngIf="isCS" class="col-sm-4">
        <div class=" form-group mb-3">
          <label for="exampleFormControlInput1" class="form-label">Network/Server Rack 1 & 2 (MM):</label>
          <input [(ngModel)]="objRack.distanceBetweenTwoRacks" [ngModelOptions]="{standalone: true}" type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" >
        </div>
      </div>
      <div class="row col-12 pr-0 mt-3">
        <div class="col-10"></div>
        <div class="col-2 pr-0 text_right">
          <button *ngIf="isUpdate==false" type="button" class="btn btn-danger btn-sm " (click)="addCabinet(contentCabinet)"> Add To Grid </button>
          <button *ngIf="isUpdate==true" class="btn btn-danger btn-sm" (click)="tempData('')">Update</button>
          
        <!-- <button type="button" class="btn btn-danger btn-sm " (click)="addCabinet(contentCabinet)"> Add To Grid </button> -->
        </div>
        </div>
    </div>
  </div>
  
  
  
    
  
    <!-- battery-table.component.html -->
  <!-- battery-table.component.html -->
  
  
  <div class="container mt-4">
    <table class="table table-bordered">
      <thead class="thead-dark">
        <tr>
          <th>Room Name</th>
          <th>Alarm Required</th>
          <th *ngIf="isCS">Alarm Option</th>
          <th>Rack Name</th>
          <th *ngIf="isCS">CQRS Type</th>
          <th>Length</th>
          <th>Width</th>
          <th>Height</th>
          <th *ngIf="isCS">Cylinder Position</th>
          <th *ngIf="isCS">LHS</th>
          <th *ngIf="isCS">RHS</th>
          <th *ngIf="isCS">Back</th>
          <th *ngIf="isCS">Distance Between Two Racks</th>
          <th>Action</th>
          
        </tr>
      </thead>
      <tbody>
        <ng-container *ngFor="let room of this.networkRackTableData.networkRooms; let i = index">
          <ng-container *ngFor="let rack of room.rack; let j = index">
            <tr> 
              <ng-container *ngIf="j === 0">
                <td class="align-middle" [rowSpan]="room.rack.length">{{ room.roomName }}</td>
              </ng-container>
              <td>{{networkRackData.alarmRequired}}</td>
              <td *ngIf="isCS">{{networkRackData.alarmOption}}</td>
              <td>{{ rack.rackName }}</td>
              <td *ngIf="isCS">{{ rack.cqrsType }}</td>
              <td>{{ rack.length }}</td>
              <td>{{ rack.width }}</td>
              <td>{{ rack.height }}</td>
              <td *ngIf="isCS">{{ rack.cylinderPosition }}</td>
              <td *ngIf="isCS">{{ rack.lhs }}</td>
              <td *ngIf="isCS">{{ rack.rhs }}</td>
              <td *ngIf="isCS">{{ rack.back }}</td>
              <td *ngIf="isCS">{{rack.distanceBetweenTwoRacks}}</td>
              <td class="width_td pull-left">
                <button type="button" (click)="editRow(j,room)" class="btn btn-sm text-success pull-left"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></button>
                <button  type="button" (click)="deleteRow(j,room)" class="btn btn-sm text-danger pull-left m-left"><i class="fa fa-trash" aria-hidden="true"></i></button>
                </td>
            </tr>
          </ng-container>
        </ng-container>
      </tbody>
    </table>
  </div>
</form>
<ng-template #content let-modal>
  <!-- <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title"></h4>
    <button type="button" class="btn-close" aria-label="Close" (click)=" handleLithium('close'); modal.dismiss('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>{{modelText}}</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="handleLithium('cf rep'); modal.dismiss('Cross click')">Connect Ceasefire Representative</button>
    <button type="button" class="btn btn-outline-dark" (click)=" handleLithium('gss'); modal.dismiss('Cross click')">Fill Total Flooding System</button>
    <button type="button" class="btn btn-outline-dark" (click)="handleLithium('close'); modal.dismiss('Cross click')">Close</button>


  </div> -->
</ng-template>

<ng-template #contentCabinet let-modal>
  <div class="modal-header">
    <h4 class="modal-title" id="modal-basic-title"></h4>
    <button type="button" class="btn-close" aria-label="Close" (click)="modal.dismiss('Cross click')"></button>
  </div>
  <div class="modal-body">
    <p>Add More Rack to this Room</p>
  </div>
  <div class="modal-footer">
    <button type="button" class="btn btn-outline-dark" (click)="tempData('Yes');modal.dismiss('Cross click')">Yes</button>
    <button type="button" class="btn btn-outline-dark" (click)="tempData('No');modal.dismiss('Cross click')">No</button>
  </div> 
</ng-template>

<ng-template #tipContent
	> 
  <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/Area_images/Area_%2020240129190225.jpg" style="height: 200px;width: 200px;">
	</ng-template
>

<ng-template #lhs
	> 
  <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/networkserverrack/net_ser_left.jpg" style="height: 200px;width: 200px;">
	</ng-template
>

<ng-template #rhs
	> 
  <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/networkserverrack/net_ser_right.jpg" style="height: 200px;width: 200px;">
	</ng-template
>

<ng-template #back
	> 
  <!-- <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/battery_bank/battery_bank_back.jpg" style="height: 200px;width: 200px;"> -->
	</ng-template
>



<ng-template #rowContent
	>
  <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/battery_bank/battery_bank_row.jpg" style="height: 200px;width: 200px;">
	</ng-template
>
<ng-template #directIN
> 
</ng-template
>
<ng-template #panel
> 
<img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/panel_hooter.jpg" style="height: 200px;width: 300px;">
</ng-template
>
<ng-template #colContent
	>
  <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/battery_bank/battery_bank_column.jpg" style="height: 200px;width: 200px;">
	</ng-template
>
<ng-template #heightContent
	>
  <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/networkserverrack/net_ser_H.jpg" style="height: 200px;width: 200px;">
	</ng-template
>
<ng-template #widthContent
	>
  <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/networkserverrack/net_ser_D.jpg" style="height: 200px;width: 200px;">
	</ng-template
>
<ng-template #NooFroomTT
	>
  <p>
    Enter here the total no of rooms containing network/server rack  to be protected.

  </p>
  <!-- <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/networkserverrack/net_ser_D.jpg" style="height: 200px;width: 200px;"> -->
	</ng-template
>
<ng-template #NameOfroomTT
	>
  <p>
    Name of Room 1: and Enter the name of the room containing present network/server rack

    <!-- Enter here the total no of rooms containing network/server rack  to be protected. -->

  </p>
  <!-- <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/networkserverrack/net_ser_D.jpg" style="height: 200px;width: 200px;"> -->
	</ng-template
>
<ng-template #NameOfrackTT
	>
  <p>
    Enter the name of the rack for which you are filling the dimensions.

    <!-- Name of Room 1: and Enter the name of the room containing present network/server rack -->

    <!-- Enter here the total no of rooms containing network/server rack  to be protected. -->

  </p>
  <!-- <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/networkserverrack/net_ser_D.jpg" style="height: 200px;width: 200px;"> -->
	</ng-template
>
<ng-template #positionTT
	>
  <p>
    Enter where your agent cylinder is to be positioned in respect to your rack

    <!-- Enter the name of the rack for which you are filling the dimensions. -->

    <!-- Name of Room 1: and Enter the name of the room containing present network/server rack -->

    <!-- Enter here the total no of rooms containing network/server rack  to be protected. -->

  </p>
  <!-- <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/networkserverrack/net_ser_D.jpg" style="height: 200px;width: 200px;"> -->
	</ng-template
>
<ng-template #lengthContent
	>
  <img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/networkserverrack/net_ser_L.jpg" style="height: 200px;width: 200px;">
	</ng-template
>

<ng-template #diContent
	>
<img *ngIf="off==false" src="https://cfx.ceasefire.biz/assets/KSS/direct_indirect.jpg" style="height: 200px;width: 300px;">

  <p *ngIf="off==false">Choose <b>Direct </b>when you have multiple cabinets with the largest cabinet's volume from among them is not greater then 2 m cube. </p>
	<br>

  <p *ngIf="off==false">Choose <b>Indirect </b>when you have a singular or limited no of equal volume cabinets whose combine volume is 2 m cube and above.</p>
  </ng-template
>
<!-- <form (ngSubmit)="onSubmit()" #systemForm="ngForm" class="form-container">

<div class="border_btm mb-3 col-12 mt-3">
    <h5>CQRS System Detail</h5>
  </div>
  <div class="row col-12">
    <div class="col-12 row ">
      <div class="col-12 border_btm">
        <h6>Dimensions of Network Rack</h6>
      </div>
      <div class="col-sm-4">
        <div class=" form-group mb-3">
          <label for="exampleFormControlInput1" class="form-label">Length (MM):</label>
          <input type="number" class="form-control" id="exampleFormControlInput1" placeholder="0"  [(ngModel)]="networkRackData.dimensionsLength" [ngModelOptions]="{standalone: true}">
        </div>
      </div>
      <div class="col-sm-4">
        <div class=" form-group mb-3">
          <label for="exampleFormControlInput1" class="form-label">Width (MM):</label>
          <input type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" [(ngModel)]="networkRackData.dimensionsWidth" [ngModelOptions]="{standalone: true}">
        </div>
      </div>
      <div class="col-sm-4">
        <div class=" form-group mb-3">
          <label for="exampleFormControlInput1" class="form-label">Height (MM):</label>
          <input type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" [(ngModel)]="networkRackData.dimensionsHeight" [ngModelOptions]="{standalone: true}">
        </div>
      </div>
    </div>
    <div class="col-12 row">
      <div class="col-12 border_btm">
        <h6>Distance Between wall to Network Rack</h6>
      </div>
      <div class="col-sm-4">
        <div class=" form-group mb-3">
          <label for="exampleFormControlInput1" class="form-label">L.H.S (MM):</label>
          <input type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" [(ngModel)]="networkRackData.distanceLHS" [ngModelOptions]="{standalone: true}">
        </div>
      </div>

         <div class="col-sm-4">
        <div class=" form-group mb-3">
          <label for="exampleFormControlInput1" class="form-label">R.H.S (MM):</label>
          <input type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" [(ngModel)]="networkRackData.distanceRHS" [ngModelOptions]="{standalone: true}">
        </div>
      </div>

         <div class="col-sm-4">
        <div class=" form-group mb-3">
          <label for="exampleFormControlInput1" class="form-label">Back (MM):</label>
          <input type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" [(ngModel)]="networkRackData.distanceBack" [ngModelOptions]="{standalone: true}">
        </div>
      </div>
    </div>

         <div class="col-12 row">
      <div class=" border_btm">
        <h6>Distance Between Two Network Racks</h6>
      </div>
      <div class="col-sm-4">
        <div class=" form-group mb-3">
          <label for="exampleFormControlInput1" class="form-label">Network Rack 1 & 2 (MM):</label>
          <input type="number" class="form-control" id="exampleFormControlInput1" placeholder="0" [(ngModel)]="networkRackData.distanceBetweenWallToNetworkRack" [ngModelOptions]="{standalone: true}">
        </div>
      </div>
      <div class="col-sm-4">
        <div class=" form-group mb-3">
          <label for="exampleFormControlInput1" class="form-label">Room Name:</label>
          <div class="multi-select" (click)="toggleOptions()">
            <div class="selected-items">
              <div *ngFor="let item of selectedItems" class="selected-item btn-sm btn btn-outline-danger badge_danger ">
                {{ item }}
                <a (click)="removeItem(item)" class="btn close_btn btn-sm" aria-label="Close"><span aria-hidden="true">&times;</span></a>
              </div>
            </div>
            <div class="dropdown" #dropdown>
              <input class="form-control room_name" type="text" [(ngModel)]="newItem" (keydown.enter)="addItem()" placeholder="Add new item" [ngModelOptions]="{standalone: true}">
              <button type="button" (click)="addItem()" class="btn btn-danger add_new">+</button>
            </div>
            
            <div class="options mt-2" *ngIf="showOptions" (click)="handleDropdownClick($event)">
              <div class="list-group list_g">
                <button *ngFor="let option of options" class="list-group-item list-group-item-action" (click)="selectItem(option)">
                  {{ option }}
                </button>
              </div>
            </div>
            
          </div>
        </div>
        </div>

    </div>
  </div>
  <div class="row col-12 pr-0 mt-3">
    <div class="col-10"></div>
    <div class="col-2 pr-0">
    <button *ngIf="networkRackData.id==0" type="submit" class="btn btn-danger"> Add To Grid </button>
    <button *ngIf="networkRackData.id!=0" type="button" (click)="update()" class="btn btn-danger btn-sm "> Update </button>
    </div>
    </div>
</form>
  <table *ngIf="networkRackTableData.length > 0" class="table table-bordered mt-3">
    <thead>
      <tr>
        <th>Length (MM)</th>
        <th>Width (MM)</th>
        <th>Height (MM)</th>
        <th>L.H.S</th>
          <th>R.H.S</th>
          <th>Back</th>
          <th>Distance Between Racks</th>
        <th>Room Name</th>

        <th>Action</th>
      </tr>
    </thead>
    <tbody>
      <tr *ngFor="let data of networkRackTableData let i = index">
        <td>{{ data.dimensionsLength }}</td>
        <td>{{ data.dimensionsWidth }}</td>
        <td>{{ data.dimensionsHeight }}</td>
        <td>{{ data.distanceLHS }}</td>
        <td>{{ data.distanceRHS }}</td>
        <td>{{ data.distanceBack }}</td>
        <td>{{ data.distanceBetweenWallToNetworkRack }}</td>
        <td>{{getStringArray(data.roomNames).join(', ')}}</td>
        <td class="width_td pull-left">
          <button type="button" (click)="editRow(i,data)" class="btn btn-sm text-success pull-left"><i class="fa fa-pencil-square-o" aria-hidden="true"></i></button>
          <button type="button" (click)="deleteRow(i,data)" class="btn btn-sm text-danger pull-left m-left"><i class="fa fa-trash" aria-hidden="true"></i></button>
          </td>

      </tr>
    </tbody>
  </table> -->